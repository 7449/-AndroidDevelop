package greendao.develop.android.multi.table.bean.one;

import java.util.Map;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.AbstractDaoSession;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.identityscope.IdentityScopeType;
import org.greenrobot.greendao.internal.DaoConfig;

import greendao.develop.android.multi.table.bean.one.ClassBean;
import greendao.develop.android.multi.table.bean.one.StudentBean;
import greendao.develop.android.multi.table.bean.two.TwoClassBean;
import greendao.develop.android.multi.table.bean.two.SchoolBean;

import greendao.develop.android.multi.table.bean.one.ClassBeanDao;
import greendao.develop.android.multi.table.bean.one.StudentBeanDao;
import greendao.develop.android.multi.table.bean.two.TwoClassBeanDao;
import greendao.develop.android.multi.table.bean.two.SchoolBeanDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * {@inheritDoc}
 * 
 * @see org.greenrobot.greendao.AbstractDaoSession
 */
public class DaoSession extends AbstractDaoSession {

    private final DaoConfig classBeanDaoConfig;
    private final DaoConfig studentBeanDaoConfig;
    private final DaoConfig twoClassBeanDaoConfig;
    private final DaoConfig schoolBeanDaoConfig;

    private final ClassBeanDao classBeanDao;
    private final StudentBeanDao studentBeanDao;
    private final TwoClassBeanDao twoClassBeanDao;
    private final SchoolBeanDao schoolBeanDao;

    public DaoSession(Database db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
            daoConfigMap) {
        super(db);

        classBeanDaoConfig = daoConfigMap.get(ClassBeanDao.class).clone();
        classBeanDaoConfig.initIdentityScope(type);

        studentBeanDaoConfig = daoConfigMap.get(StudentBeanDao.class).clone();
        studentBeanDaoConfig.initIdentityScope(type);

        twoClassBeanDaoConfig = daoConfigMap.get(TwoClassBeanDao.class).clone();
        twoClassBeanDaoConfig.initIdentityScope(type);

        schoolBeanDaoConfig = daoConfigMap.get(SchoolBeanDao.class).clone();
        schoolBeanDaoConfig.initIdentityScope(type);

        classBeanDao = new ClassBeanDao(classBeanDaoConfig, this);
        studentBeanDao = new StudentBeanDao(studentBeanDaoConfig, this);
        twoClassBeanDao = new TwoClassBeanDao(twoClassBeanDaoConfig, this);
        schoolBeanDao = new SchoolBeanDao(schoolBeanDaoConfig, this);

        registerDao(ClassBean.class, classBeanDao);
        registerDao(StudentBean.class, studentBeanDao);
        registerDao(TwoClassBean.class, twoClassBeanDao);
        registerDao(SchoolBean.class, schoolBeanDao);
    }
    
    public void clear() {
        classBeanDaoConfig.clearIdentityScope();
        studentBeanDaoConfig.clearIdentityScope();
        twoClassBeanDaoConfig.clearIdentityScope();
        schoolBeanDaoConfig.clearIdentityScope();
    }

    public ClassBeanDao getClassBeanDao() {
        return classBeanDao;
    }

    public StudentBeanDao getStudentBeanDao() {
        return studentBeanDao;
    }

    public TwoClassBeanDao getTwoClassBeanDao() {
        return twoClassBeanDao;
    }

    public SchoolBeanDao getSchoolBeanDao() {
        return schoolBeanDao;
    }

}
